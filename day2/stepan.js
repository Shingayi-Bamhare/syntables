var nools = require("nools")


var common = require("./common.js")


var Indent = 4


// Autogenerated with DRAKON Editor 1.28


function DataEngine(tables) {
    // item 91
    this.tables = {}
    // item 890001
    var _ind89 = 0;
    var _col89 = tables;
    var _len89 = _col89.length;
    while (true) {
        // item 890002
        if (_ind89 < _len89) {
            
        } else {
            break;
        }
        // item 890004
        var tableName = _col89[_ind89];
        // item 116
        var table = new FactTable(tableName)
        // item 87
        this.tables[tableName] = table
        // item 890003
        _ind89++;
    }
    // item 98
    this.select = DataEngine_select
    this.selectOne = DataEngine_selectOne
    this.insert = DataEngine_insert
}

function DataEngine_insert(row) {
    // item 104
    var tableName = row.constructor.name
    // item 105
    var table = this.tables[tableName]
    // item 106
    table.rows.push(row)
}

function DataEngine_select(tableName, condition) {
    // item 37
    var table = this.tables[tableName]
    // item 40
    var predicate = function (row) {
    	return rowMatcher(row, condition)
    }
    // item 41
    return table.rows.filter(predicate)
}

function DataEngine_selectOne(tableName, condition) {
    // item 71
    var found = this.select(
    	tableName,
    	condition
    )
    // item 74
    if (found.length == 1) {
        // item 73
        return found[0]
    } else {
        // item 78
        if (found.length == 0) {
            // item 626
            console.log(condition, found)
            // item 82
            var message = "many rows found in " + tableName
            // item 77
            throw new Error(message)
        } else {
            // item 81
            return null
        }
    }
}

function FactTable(name) {
    // item 97
    this.name = name
    this.rows = []
}

function JsAssignment(left, right) {
    // item 171
    this.left = left
    this.right = right
    // item 211
    this.print = JsAssignment_Print
}

function JsAssignment_Print(output, depth) {
    // item 207
    var indent = makeIndent(depth)
    // item 201
    output.push(indent + this.left + " = " + this.right)
}

function JsCall(left, fun, params) {
    // item 301
    this.left = left
    this.fun = fun
    this.params = params
    // item 302
    this.print = JsCall_Print
}

function JsCall_Print(output, depth) {
    // item 308
    var indent = makeIndent(depth)
    // item 309
    var right = this.fun + 
    	"(" +
    	this.params.join(",") +
    	 ")"
    // item 310
    var expression
    // item 311
    if (this.left) {
        // item 314
        expression = this.left + " = " + right
    } else {
        // item 315
        expression = right
    }
    // item 316
    output.push(indent + expression)
}

function JsFor(condition) {
    // item 714
    this.kids = []
    this.condition = condition
    // item 715
    this.print = JsFor_Print
}

function JsFor_Print(output, depth) {
    // item 725
    var indent = makeIndent(depth)
    // item 721
    var header = indent + "for (" + this.condition + ") {"
    // item 724
    output.push(header)
    // item 722
    printKids(this, output, depth)
    // item 723
    output.push(indent + "}")
    output.push("")
}

function JsFunction(name, params) {
    // item 178
    this.kids = []
    // item 177
    this.name = name
    this.params = params || []
    // item 210
    this.print = JsFunction_Print
}

function JsFunction_Print(output, depth) {
    // item 208
    var indent = makeIndent(depth)
    // item 190
    var header = indent + "function " + this.name + "(" +
    	this.params.join(", ") + ") {"
    // item 195
    output.push(header)
    // item 193
    printKids(this, output, depth)
    // item 194
    output.push(indent + "}")
    output.push("")
}

function JsIf(condition) {
    // item 276
    this.kids = []
    // item 275
    this.condition = condition
    // item 277
    this.print = JsIf_Print
}

function JsIf_Print(output, depth) {
    // item 295
    var indent = makeIndent(depth)
    // item 291
    var header = indent + "if (" + this.condition + ") {"
    // item 294
    output.push(header)
    // item 292
    printKids(this, output, depth)
    // item 293
    output.push(indent + "}")
    output.push("")
}

function JsLine(text) {
    // item 523
    this.text = text
    // item 524
    this.print = JsLine_Print
}

function JsLine_Print(output, depth) {
    // item 530
    var indent = makeIndent(depth)
    // item 531
    var line = indent + this.text
    // item 532
    output.push(line)
}

function JsList() {
    // item 743
    this.kids = []
    // item 744
    this.print = function(output, depth) { printKids(this, output, depth - 1) }
}

function addJsExport(parent, name) {
    // item 164
    var assi = new JsAssignment(
    	"this." + name,
    	name
    )
    // item 165
    parent.kids.push(assi)
}

function addJsField(data, parent, field) {
    // item 157
    var assi = new JsAssignment(
    	"this." + field.name,
    	getValueForFieldCtr(field)
    )
    // item 158
    parent.kids.push(assi)
}

function addJsRecord(data, parent, table) {
    // item 146
    var fields = getNonNullable(data, table)
    var fieldNames = fields.map(f => f.name)
    // item 147
    var recordCtr = new JsFunction(
    	table.name,
    	fieldNames
    )
    // item 148
    parent.kids.push(recordCtr)
    // item 754
    var allFields = getFields(data, table)
    // item 1490001
    var _ind149 = 0;
    var _col149 = allFields;
    var _len149 = _col149.length;
    while (true) {
        // item 1490002
        if (_ind149 < _len149) {
            
        } else {
            break;
        }
        // item 1490004
        var field = _col149[_ind149];
        // item 151
        addJsField(
        	data,
        	recordCtr,
        	field
        )
        // item 1490003
        _ind149++;
    }
}

function addJsTable(data, parent, table) {
    // item 360
    var ctr = fun(parent, table.collectionName, [])
    // item 365
    assi(ctr, "this._count", "0")
    assi(ctr, "this.insert", makeInsertName(table))
    assi(ctr, "this.remove", makeRemoveName(table))
    assi(ctr, "this.count", "function() { return this._count } ")
    assi(ctr, "this.forEach", makeForeachName(table))
    // item 420
    var indexes = getIndexes(data, table)
    // item 4210001
    var _ind421 = 0;
    var _col421 = indexes;
    var _len421 = _col421.length;
    while (true) {
        // item 4210002
        if (_ind421 < _len421) {
            
        } else {
            break;
        }
        // item 4210004
        var index = _col421[_ind421];
        // item 426
        assi(ctr, "this._" + index.name, "{}")
        // item 4210003
        _ind421++;
    }
    // item 4270001
    var _ind427 = 0;
    var _col427 = indexes;
    var _len427 = _col427.length;
    while (true) {
        // item 4270002
        if (_ind427 < _len427) {
            
        } else {
            break;
        }
        // item 4270004
        var index = _col427[_ind427];
        // item 430
        var fieldName = getByName(index)
        var procName = getByProcName(index)
        // item 429
        assi(ctr, "this." + fieldName, procName)
        // item 4270003
        _ind427++;
    }
}

function addNotNullCheck(parent, data, table, fieldName) {
    // item 577
    var condition = "typeof " + fieldName + 
    	" === \"undefined\" || " + 
    	fieldName + " === null"
    // item 578
    var field = data.selectOne("Field", {
    	tableName: table.name,
    	name: fieldName
    })
    // item 579
    if (field.type == "string") {
        // item 582
        condition += (" || " + fieldName + " === \"\"")
    } else {
        
    }
    // item 583
    var block = ifs(parent, condition)
    // item 592
    var message = "\"" + table.name + "." + fieldName +
      " is null\""
    // item 584
    err(block, message)
}

function addUniqueCheck(parent, data, table, index) {
    // item 606
    var ifields = getIndexFields(data, index)
    var keyName = makeKeyName(index)
    // item 604
    var keyValue = makeKey(ifields)
    // item 605
    assi(parent, "var " + keyName, keyValue)
    // item 607
    var condition = keyName + " in this._" + index.name
    // item 608
    var block = ifs(parent, condition)
    // item 612
    var values = ifields.join(" + \", \" + ")
    // item 611
    var message = "\"" + table.name + "." + index.name +
      " indexed fields are not unique: \" + " +
      values
    // item 610
    err(block, message)
}

function assi(output, left, right) {
    // item 395
    var item = new JsAssignment(left, right)
    // item 396
    output.kids.push(item)
}

function buildJavaScriptAst(data) {
    // item 122
    var module = data.selectOne("ModuleName", null)
    // item 745
    var root = new JsList()
    // item 125
    var moduleFun = fun(root, module.name, [])
    // item 123
    var tables = data.select("Table", null)
    // item 1260001
    var _ind126 = 0;
    var _col126 = tables;
    var _len126 = _col126.length;
    while (true) {
        // item 1260002
        if (_ind126 < _len126) {
            
        } else {
            break;
        }
        // item 1260004
        var table = _col126[_ind126];
        // item 128
        addJsRecord(
        	data,
        	moduleFun,
        	table
        )
        // item 1260003
        _ind126++;
    }
    // item 3400001
    var _ind340 = 0;
    var _col340 = tables;
    var _len340 = _col340.length;
    while (true) {
        // item 3400002
        if (_ind340 < _len340) {
            
        } else {
            break;
        }
        // item 3400004
        var table = _col340[_ind340];
        // item 342
        addJsTable(
        	data,
        	moduleFun,
        	table
        )
        // item 3400003
        _ind340++;
    }
    // item 4370001
    var _ind437 = 0;
    var _col437 = tables;
    var _len437 = _col437.length;
    while (true) {
        // item 4370002
        if (_ind437 < _len437) {
            
        } else {
            break;
        }
        // item 4370004
        var table = _col437[_ind437];
        // item 439
        makeInsert(
        	moduleFun,
        	data,
        	table
        )
        // item 440
        makeRemove(
        	moduleFun,
        	data,
        	table
        )
        // item 441
        makeIndexGetters(
        	moduleFun,
        	data,
        	table
        )
        // item 702
        makeForeach(
        	moduleFun,
        	data,
        	table
        )
        // item 4370003
        _ind437++;
    }
    // item 4310001
    var _ind431 = 0;
    var _col431 = tables;
    var _len431 = _col431.length;
    while (true) {
        // item 4310002
        if (_ind431 < _len431) {
            
        } else {
            break;
        }
        // item 4310004
        var table = _col431[_ind431];
        // item 433
        assi(
        	moduleFun,
        	"this." + table.collectionName,
        	"new " + table.collectionName + "()"
        )
        // item 4310003
        _ind431++;
    }
    // item 747
    var block = ifs(root, "typeof exports != \"undefined\"")
    // item 746
    assi(block, "exports." + module.name, module.name)
    // item 139
    return root
}

function call(output, left, fun, params) {
    // item 402
    var item = new JsCall(left, fun, params)
    // item 403
    output.kids.push(item)
}

function createRulesEngine(ruleFile) {
    // item 257
    var options = {
    	name: "Transformation rules",
    	define: common,
    	scope: {	}
    }
    // item 254
    var flow = nools.compile(ruleFile, options)
    // item 253
    return flow
}

function err(parent, message) {
    // item 590
    var item = new JsLine("throw new Error(" + message + ")")
    // item 591
    parent.kids.push(item)
}

function fors(output, condition) {
    // item 731
    var item = new JsFor(condition)
    // item 732
    output.kids.push(item)
    // item 733
    return item
}

function fun(parent, name, params) {
    // item 409
    var item = new JsFunction(name, params)
    // item 410
    parent.kids.push(item)
    // item 411
    return item
}

function getByName(index) {
    // item 383
    return "get_by_" + index.name
}

function getByProcName(index) {
    // item 389
    return index.tableName + "_" + getByName(index)
}

function getDefaultValue(field) {
    var _sw2170000_ = 0;
    // item 2170000
    _sw2170000_ = field.type;
    // item 2170001
    if (_sw2170000_ === "int") {
        // item 227
        return "0"
    } else {
        // item 2170002
        if (_sw2170000_ === "double") {
            // item 226
            return "0.0"
        } else {
            // item 2170003
            if (_sw2170000_ === "string") {
                
            } else {
                // item 2170004
                throw "Unexpected switch value: " + _sw2170000_;
            }
            // item 225
            return "\"\""
        }
    }
}

function getFields(data, table) {
    // item 753
    return data.select(
    	"Field",
    	{"tableName": table.name}
    )
}

function getIndexFields(data, index) {
    // item 497
    var fields = data.select("IndexedField", {
    	indexName: index.name,
    	tableName: index.tableName
    })
    // item 505
    orderBy(fields, "ordinal")
    // item 506
    var getTableField = function(ifield) {
    	return data.selectOne("Field", {
    		tableName: index.tableName,
    		name: ifield.fieldName
    	})
    }
    // item 507
    return fields
    	.map(getTableField)
    	.map(f => f.name)
}

function getIndexes(data, table) {
    // item 475
    var indexes = data.select("Index", {
    	"tableName": table.name
    })
    // item 476
    return indexes
}

function getNonNullable(data, table) {
    // item 556
    var fields = getFields(data, table)
    // item 557
    return fields.filter(f => !f.nullable)
}

function getValueForFieldCtr(field) {
    // item 335
    if (field.nullable) {
        // item 339
        return field.defaultValue
    } else {
        // item 338
        return field.name
    }
}

function ifs(output, condition) {
    // item 417
    var item = new JsIf(condition)
    // item 418
    output.kids.push(item)
    // item 419
    return item
}

function makeForeach(parent, data, table) {
    // item 708
    var method = fun(
    	parent,
    	makeForeachName(table),
    	["action"]
    )
    // item 734
    var indexes = getIndexes(data, table)
    // item 735
    var index = indexes[0]
    // item 736
    var block = fors(method, "var key in this._" + index.name)
    // item 737
    assi(block, "var row", "this._" + index.name + "[key]")
    // item 738
    call(block, null, "action", ["row"])
}

function makeForeachName(table) {
    // item 701
    return table.name + "_forEach"
}

function makeIndent(depth) {
    // item 189
    return Array(depth * Indent).join(" ")
}

function makeIndexGetter(parent, data, index) {
    // item 508
    var fields = getIndexFields(data, index)
    // item 509
    var getter = fun(
    	parent,
    	getByProcName(index),
    	fields
    )
    // item 515
    var keyValue = makeKey(fields)
    // item 516
    assi(getter, "var _key", keyValue)
    // item 517
    ret(
    	getter,
    	"this._" + index.name + "[_key]"
    )
}

function makeIndexGetters(parent, data, table) {
    // item 482
    var indexes = getIndexes(data, table)
    // item 4830001
    var _ind483 = 0;
    var _col483 = indexes;
    var _len483 = _col483.length;
    while (true) {
        // item 4830002
        if (_ind483 < _len483) {
            
        } else {
            break;
        }
        // item 4830004
        var index = _col483[_ind483];
        // item 484
        makeIndexGetter(
        	parent,
        	data,
        	index
        )
        // item 4830003
        _ind483++;
    }
}

function makeInsert(parent, data, table) {
    // item 559
    var fields = getNonNullable(data, table)
    var fieldNames = fields.map(f => f.name)
    // item 547
    var method = fun(
    	parent,
    	makeInsertName(table),
    	fieldNames
    )
    // item 5690001
    var _ind569 = 0;
    var _col569 = fields;
    var _len569 = _col569.length;
    while (true) {
        // item 5690002
        if (_ind569 < _len569) {
            
        } else {
            break;
        }
        // item 5690004
        var field = _col569[_ind569];
        // item 571
        addNotNullCheck(
        	method,
        	data,
        	table,
        	field.name
        )
        // item 5690003
        _ind569++;
    }
    // item 594
    var indexes = getIndexes(data, table)
    // item 5950001
    var _ind595 = 0;
    var _col595 = indexes;
    var _len595 = _col595.length;
    while (true) {
        // item 5950002
        if (_ind595 < _len595) {
            
        } else {
            break;
        }
        // item 5950004
        var index = _col595[_ind595];
        // item 598
        addUniqueCheck(
        	method,
        	data,
        	table,
        	index
        )
        // item 5950003
        _ind595++;
    }
    // item 613
    var rec = "var _record = new " +
    	table.name + "(" + fieldNames.join(", ") +
    	")"
    // item 627
    method.kids.push(new JsLine(rec))
    // item 6210001
    var _ind621 = 0;
    var _col621 = indexes;
    var _len621 = _col621.length;
    while (true) {
        // item 6210002
        if (_ind621 < _len621) {
            
        } else {
            break;
        }
        // item 6210004
        var index = _col621[_ind621];
        // item 625
        var keyName = makeKeyName(index)
        // item 624
        var inserter = "this._" + index.name +
         "[" + keyName + "] = _record"
        // item 623
        method.kids.push(
        	new JsLine(inserter)
        )
        // item 6210003
        _ind621++;
    }
    // item 593
    method.kids.push(
    	new JsLine("this._count++")
    )
    // item 695
    ret(method, "_record")
}

function makeInsertName(table) {
    // item 371
    return table.name + "_insert"
}

function makeKey(fields) {
    // item 545
    return fields.join(" + \"|||\" + ")
}

function makeKeyName(index) {
    // item 620
    return "_key_" + index.name
}

function makeRemove(parent, data, table) {
    // item 636
    var method = fun(
    	parent,
    	makeRemoveName(table),
    	["row"]
    )
    // item 672
    var checkNull = ifs(method, "!row")
    // item 673
    checkNull.kids.push(new JsLine("return"))
    // item 651
    var indexes = getIndexes(data, table)
    // item 6520001
    var _ind652 = 0;
    var _col652 = indexes;
    var _len652 = _col652.length;
    while (true) {
        // item 6520002
        if (_ind652 < _len652) {
            
        } else {
            break;
        }
        // item 6520004
        var index = _col652[_ind652];
        // item 674
        returnIfNotFound(
        	method,
        	data,
        	table,
        	index
        )
        // item 6520003
        _ind652++;
    }
    // item 6930001
    var _ind693 = 0;
    var _col693 = indexes;
    var _len693 = _col693.length;
    while (true) {
        // item 6930002
        if (_ind693 < _len693) {
            
        } else {
            break;
        }
        // item 6930004
        var index = _col693[_ind693];
        // item 654
        removeFromIndex(
        	method,
        	data,
        	table,
        	index
        )
        // item 6930003
        _ind693++;
    }
    // item 650
    method.kids.push(
    	new JsLine("this._count--")
    )
}

function makeRemoveKey(fields) {
    // item 692
    fields = fields.map(f => "row." + f)
    // item 691
    return fields.join(" + \"|||\" + ")
}

function makeRemoveName(table) {
    // item 377
    return table.name + "_remove"
}

function makeTableList() {
    // item 269
    return Object.keys(common)
}

function orderBy(list, field) {
    // item 503
    var comparer = function(left, right) {
    	var leftValue = left[field]
    	var rightValue = right[field]
    	return leftValue - rightValue
    	
    }
    // item 504
    list.sort(comparer)
}

function outputFacts(session, onSuccess) {
    // item 236
    var tables = makeTableList()
    // item 241
    var data = new DataEngine(tables)
    // item 243
    var facts = session.getFacts()
    // item 2390001
    var _ind239 = 0;
    var _col239 = facts;
    var _len239 = _col239.length;
    while (true) {
        // item 2390002
        if (_ind239 < _len239) {
            
        } else {
            break;
        }
        // item 2390004
        var fact = _col239[_ind239];
        // item 242
        data.insert(fact)
        // item 2390003
        _ind239++;
    }
    // item 238
    onSuccess(data)
}

function printKids(self, output, depth) {
    // item 2830001
    var _ind283 = 0;
    var _col283 = self.kids;
    var _len283 = _col283.length;
    while (true) {
        // item 2830002
        if (_ind283 < _len283) {
            
        } else {
            break;
        }
        // item 2830004
        var kid = _col283[_ind283];
        // item 285
        kid.print(output, depth + 1)
        // item 2830003
        _ind283++;
    }
}

function removeFromIndex(parent, data, table, index) {
    // item 669
    var ifields = getIndexFields(data, index)
    var keyName = makeKeyName(index)
    // item 670
    var remove = "delete this._" +
    	index.name + "[" + keyName + "]"
    // item 671
    parent.kids.push(new JsLine(remove))
}

function ret(parent, value) {
    // item 538
    var item = new JsLine("return " + value)
    // item 539
    parent.kids.push(item)
}

function returnIfNotFound(parent, data, table, index) {
    // item 682
    var ifields = getIndexFields(data, index)
    var keyName = makeKeyName(index)
    // item 680
    var keyValue = makeRemoveKey(ifields)
    // item 681
    assi(parent, "var " + keyName, keyValue)
    // item 683
    var condition = "!(" + keyName + " in this._" + index.name + ")"
    // item 684
    var block = ifs(parent, condition)
    // item 685
    block.kids.push(new JsLine("return"))
}

function rowMatcher(row, condition) {
    // item 56
    if (condition) {
        // item 600001
        var _ind60 = 0;
        var _col60 = condition;
        var _keys60 = Object.keys(_col60); 
        var _len60 = _keys60.length;
        while (true) {
            // item 600002
            if (_ind60 < _len60) {
                
            } else {
                // item 65
                return true
            }
            // item 600004
            var key = _keys60[_ind60]; var value = _col60[key];
            // item 62
            if (row[key] == value) {
                
            } else {
                // item 64
                return false
            }
            // item 600003
            _ind60++;
        }
    } else {
        // item 59
        return true
    }
}

function runRuleSystem(flow, inputFacts) {
    // item 265
    var session = flow.getSession()
    // item 2630001
    var _ind263 = 0;
    var _col263 = inputFacts;
    var _len263 = _col263.length;
    while (true) {
        // item 2630002
        if (_ind263 < _len263) {
            
        } else {
            break;
        }
        // item 2630004
        var fact = _col263[_ind263];
        // item 266
        session.assert(fact)
        // item 2630003
        _ind263++;
    }
    // item 267
    session.match()
    // item 268
    return session
}

function transformModel(ruleFile, inputFacts, onSuccess, onError) {
    // item 29
    var flow = createRulesEngine(ruleFile)
    // item 247
    var session = flow.getSession()
    // item 244
    var onDone = function() {
    	outputFacts(session, onSuccess)
    }
    // item 2450001
    var _ind245 = 0;
    var _col245 = inputFacts;
    var _len245 = _col245.length;
    while (true) {
        // item 2450002
        if (_ind245 < _len245) {
            
        } else {
            break;
        }
        // item 2450004
        var fact = _col245[_ind245];
        // item 248
        session.assert(fact)
        // item 2450003
        _ind245++;
    }
    // item 249
    session.match().then(onDone, onError)
}


exports.transformModel = transformModel
exports.buildJavaScriptAst = buildJavaScriptAst
