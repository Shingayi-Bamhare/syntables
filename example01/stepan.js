var nools = require("nools")


var common = require("./common.js")

var ModuleName = common.ModuleName
var Table = common.Table
var Field = common.Field
var Export = common.Export



// Autogenerated with DRAKON Editor 1.28


function DataEngine(tables) {
    // item 91
    this.tables = {}
    // item 890001
    var _ind89 = 0;
    var _col89 = tables;
    var _len89 = _col89.length;
    while (true) {
        // item 890002
        if (_ind89 < _len89) {
            
        } else {
            break;
        }
        // item 890004
        var tableName = _col89[_ind89];
        // item 116
        var table = new FactTable(tableName)
        // item 87
        this.tables[tableName] = table
        // item 890003
        _ind89++;
    }
    // item 98
    this.select = DataEngine_select
    this.selectOne = DataEngine_selectOne
    this.insert = DataEngine_insert
}

function DataEngine_insert(row) {
    // item 104
    var tableName = row.constructor.name
    // item 105
    var table = this.tables[tableName]
    // item 106
    table.rows.push(row)
}

function DataEngine_select(tableName, condition) {
    // item 37
    var table = this.tables[tableName]
    // item 40
    var predicate = function (row) {
    	return rowMatcher(row, condition)
    }
    // item 41
    return table.rows.filter(predicate)
}

function DataEngine_selectOne(tableName, condition) {
    // item 71
    var found = this.select(
    	tableName,
    	condition
    )
    // item 74
    if (found.length == 1) {
        // item 73
        return found[0]
    } else {
        // item 78
        if (found.length == 0) {
            // item 82
            var message = "many rows found in " + tableName
            // item 77
            throw new Error(message)
        } else {
            // item 81
            return null
        }
    }
}

function FactTable(name) {
    // item 97
    this.name = name
    this.rows = []
}

function createRulesEngine() {
    // item 10
    var flow = nools.flow("flow1", initFlow)
    // item 5
    return flow
}

function initFlow(flow) {
    // item 12
    flow.rule("Export each table", [
        [Table, "table"]
     ], function (facts) {
        this.assert(new Export(facts.table.name))
    })
}

function makeTableList() {
    // item 115
    return [
    	"ModuleName",
    	"Table",
    	"Field",
    	"Export"
    ]
}

function rowMatcher(row, condition) {
    // item 56
    if (condition) {
        // item 600001
        var _ind60 = 0;
        var _col60 = condition;
        var _keys60 = Object.keys(_col60); 
        var _len60 = _keys60.length;
        while (true) {
            // item 600002
            if (_ind60 < _len60) {
                
            } else {
                // item 65
                return true
            }
            // item 600004
            var key = _keys60[_ind60]; var value = _col60[key];
            // item 62
            if (row[key] == value) {
                
            } else {
                // item 64
                return false
            }
            // item 600003
            _ind60++;
        }
    } else {
        // item 59
        return true
    }
}

function runRuleSystem(flow, inputFacts) {
    // item 20
    var session = flow.getSession()
    // item 180001
    var _ind18 = 0;
    var _col18 = inputFacts;
    var _len18 = _col18.length;
    while (true) {
        // item 180002
        if (_ind18 < _len18) {
            
        } else {
            break;
        }
        // item 180004
        var fact = _col18[_ind18];
        // item 21
        session.assert(fact)
        // item 180003
        _ind18++;
    }
    // item 22
    session.match()
    // item 23
    return session.getFacts()
}

function transformModel(inputFacts) {
    // item 29
    var tables = makeTableList()
    var flow = createRulesEngine()
    // item 30
    var outputFacts = runRuleSystem(
    	flow,
    	inputFacts
    )
    // item 109
    var data = new DataEngine(tables)
    // item 1070001
    var _ind107 = 0;
    var _col107 = outputFacts;
    var _len107 = _col107.length;
    while (true) {
        // item 1070002
        if (_ind107 < _len107) {
            
        } else {
            break;
        }
        // item 1070004
        var fact = _col107[_ind107];
        // item 110
        data.insert(fact)
        // item 1070003
        _ind107++;
    }
    // item 31
    return data
}


exports.transformModel = transformModel
